
# loading data

library(readr)
dataset2 <- read_csv("dataset2.csv", col_types = cols(Year = col_number(), 
              `Road_x000D_ Accidents` = col_number(), 
              `Road_x000D_ Accident_x000D_ Deaths_x000D_` = col_number(), 
              `Road_x000D_ Accident_x000D_ Injuries_x000D_` = col_number(), 
              `Registered_x000D_ Vehicles_x000D_\n` = col_number(), 
              `Road Length_x000D_` = col_number(), 
              `death rate (no. of_x000D_ deaths_x000D_ per 10,000_x000D_ vehicles)` = col_number(), 
                 `Vehicle density_x000D_ (no. of vehicles_x000D_ per km of road)` = col_number()))

# plotting a line graph to represent decadal trends in no. of road accidents from 1970 to 2020
View(dataset2)
plot(dataset2$Year,dataset2$`Road_x000D_ Accidents`,type = "l",col=2,
     xlab = "Year", ylab = "Road accidents in 1000s",
     main ="Decadal Trend in No. of Road Accidents ") 

# importing required data user category

library(readr)
table5 <- read_csv("sheet5.csv", col_types = cols(Category = col_character(), 
                                 `Accidents(2021)` = col_number(), `Death(2021)` = col_number(), 
                                 `Accidents(2022)` = col_number(), `Death(2022)` = col_number(), 
                                `Accidents(% change)` = col_number(), 
                                `Death(%change)` = col_number()))
View(table5)

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Step 1: Data Preparation
data <- data.frame(
  Category = c("Pedestrians", "Bicycles", "Two wheelers", "Auto Rickshaws", 
               "Cars, Taxis, Vans", "Trucks/Lorries", "Buses", "Others", "Total"),
  Accidents_2021 = c(17113, 3009, 52416, 5360, 25431, 12075, 3738, 9683, 128825),
  Deaths_2021 = c(9462, 1667, 22786, 2214, 9191, 5008, 1397, 4282, 56007),
  Accidents_2022 = c(20513, 3003, 63115, 6038, 29005, 13619, 5268, 11436, 151997),
  Deaths_2022 = c(10160, 1445, 25228, 2324, 10174, 5572, 1798, 4337, 61038)
)

# Step 2: Calculate Percentage Changes
data <- data %>%
  mutate(
    Accident_Percent_Change = ((Accidents_2022 - Accidents_2021) / Accidents_2021) * 100,
    Deaths_Percent_Change = ((Deaths_2022 - Deaths_2021) / Deaths_2021) * 100
  )

# Step 3: Data Reshaping for Plotting
data_long <- data %>%
  pivot_longer(cols = starts_with("Accidents"), names_to = "Year_Accidents", values_to = "Accidents") %>%
  pivot_longer(cols = starts_with("Deaths"), names_to = "Year_Deaths", values_to = "Deaths") %>%
  separate(Year_Accidents, into = c("Measure", "Year"), sep = "_") %>%
  select(-Measure) %>%
  distinct()

# Step 4: Plotting with Adjusted Labels

# Plot 1: Accident Trends by Category for 2021 and 2022
p1 <- ggplot(data_long, aes(x = Category, y = Accidents, fill = Year)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Accidents by Category (2021 vs 2022)", x = "Category", y = "Number of Accidents") +
  scale_fill_manual(values = c("2021" = "skyblue", "2022" = "coral")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

# Plot 2: Fatalities Trends by Category for 2021 and 2022
p2 <- ggplot(data_long, aes(x = Category, y = Deaths, fill = Year)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Fatalities by Category (2021 vs 2022)", x = "Category", y = "Number of Deaths") +
  scale_fill_manual(values = c("2021" = "lightgreen", "2022" = "tomato")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

# Plot 3: Percentage Change in Accidents and Fatalities by Category
p3 <- ggplot(data, aes(x = Category)) +
  geom_bar(aes(y = Accident_Percent_Change, fill = "Accidents"), stat = "identity", position = "dodge", color = "black") +
  geom_bar(aes(y = Deaths_Percent_Change, fill = "Deaths"), stat = "identity", position = "dodge", color = "black") +
  labs(title = "Percentage Change in Accidents and Fatalities from 2021 to 2022", 
       x = "Category", y = "Percentage Change") +
  scale_fill_manual(values = c("Accidents" = "cornflowerblue", "Deaths" = "lightcoral")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

# Display plots
print(p1)
print(p2)
print(p3)

#ROAD ACCIDENTS CLASSIFIED BY TYPE OF NEIGHBOURHOOD

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(scales) # for percentage labels in pie charts

# Step 1: Data Preparation
data <- data.frame(
  Area = c("Residential Area", "Institutional Area", "Market/Commercial Area", 
           "Open Area", "Others", "Total"),
  Accidents_2021 = c(76791, 28167, 57855, 193273, 56346, 412432),
  Accidents_2022 = c(86292, 29384, 66125, 219988, 59523, 461312),
  Killed_2021 = c(26921, 9754, 17656, 83489, 16152, 153972),
  Killed_2022 = c(29950, 10223, 19950, 92772, 15596, 168491),
  Injured_2021 = c(69725, 26150, 53237, 180438, 54898, 384448),
  Injured_2022 = c(78906, 28452, 61335, 213878, 60795, 443366)
)

# Function to create a pie chart
create_pie_chart <- function(data, value_col, label_col, title) {
  ggplot(data, aes(x = "", y = !!sym(value_col), fill = !!sym(label_col))) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar("y", start = 0) +
    geom_text(aes(label = paste0(round((!!sym(value_col) / sum(!!sym(value_col))) * 100, 1), "%")), 
              position = position_stack(vjust = 0.5), size = 4) +
    labs(title = title, x = NULL, y = NULL) +
    theme_void() +
    theme(legend.title = element_blank())
}

# Data preparation for individual pie charts
accidents_2021 <- data %>% select(Area, Accidents_2021) %>% filter(Area != "Total")
accidents_2022 <- data %>% select(Area, Accidents_2022) %>% filter(Area != "Total")
killed_2021 <- data %>% select(Area, Killed_2021) %>% filter(Area != "Total")
killed_2022 <- data %>% select(Area, Killed_2022) %>% filter(Area != "Total")
injured_2021 <- data %>% select(Area, Injured_2021) %>% filter(Area != "Total")
injured_2022 <- data %>% select(Area, Injured_2022) %>% filter(Area != "Total")

# Rename columns for ease of plotting
colnames(accidents_2021) <- colnames(accidents_2022) <- c("Area", "Value")
colnames(killed_2021) <- colnames(killed_2022) <- c("Area", "Value")
colnames(injured_2021) <- colnames(injured_2022) <- c("Area", "Value")

# Plotting
p1 <- create_pie_chart(accidents_2021, "Value", "Area", "Accidents in 2021")
p2 <- create_pie_chart(accidents_2022, "Value", "Area", "Accidents in 2022")
p3 <- create_pie_chart(killed_2021, "Value", "Area", "Fatalities in 2021")
p4 <- create_pie_chart(killed_2022, "Value", "Area", "Fatalities in 2022")
p5 <- create_pie_chart(injured_2021, "Value", "Area", "Injuries in 2021")
p6 <- create_pie_chart(injured_2022, "Value", "Area", "Injuries in 2022")

# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
print(p6)


#ROAD ACCIDENTS CLASSIFIED BY ROAD FEATURESâ€ƒ
# Load necessary libraries
library(tidyverse)

# Create a data frame from the provided data
data <- tibble(
  Road_feature = c("Straight road", "Curved road", "Bridge", "Culvert", 
                   "Potholes", "Steep grade", "Ongoing road works/Under construction", "Others", "Total"),
  `2021` = c(278218, 49581, 12709, 6663, 3625, 3967, 9075, 48594, 412432),
  `2022` = c(309247, 54593, 14111, 7384, 4446, 4475, 9211, 57845, 461312)
)

# Calculate percentage change
data <- data %>%
  mutate(
    `%age_change` = ((`2022` - `2021`) / `2021`) * 100
  )

# Display the data with percentage change
print(data)

# If you want to create a bar plot of the percentage changes
ggplot(data, aes(x = Road_feature, y = `%age_change`, fill = Road_feature)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Percentage Change in Road Features (2021 to 2022)",
       x = "Road Feature",
       y = "Percentage Change (%)") +
  theme_minimal()

# Create a dot plot
ggplot(data, aes(x = Road_feature, y = `%age_change`)) +
  geom_point(size = 3, color = "yellow") +
  geom_segment(aes(xend = Road_feature, yend = 0), color = "brown", linetype = "dashed") +
  coord_flip() +
  labs(title = "Percentage Change in Road Features (2021 to 2022)",
       x = "Road Feature",
       y = "Percentage Change (%)") +
  theme_minimal()

##  Road Accidents by Type of Traffic Rules Violation during 2022
# Load necessary library
library(dplyr)

# Create the data frame
road_safety_data <- data.frame(
  Category = c("Over-speeding", "Drunken driving", "Driving on wrong side", "Jumping red light", "Use of mobile phone", "Others", "Total"),
  Accidents_2021 = c(295522, 9150, 21491, 2203, 6530, 77536, 412432),
  Fatalities_2021 = c(107236, 3314, 8122, 679, 2982, 31639, 153972),
  Injured_2021 = c(280285, 7509, 20351, 1905, 5394, 69004, 384448),
  Accidents_2022 = c(333323, 10080, 22586, 4021, 7558, 83744, 461312),
  Fatalities_2022 = c(119904, 4201, 9094, 1462, 3395, 30435, 168491),
  Injured_2022 = c(322795, 8809, 21745, 3450, 6255, 80312, 443366)
)

# Calculating percentage change
road_safety_data <- road_safety_data %>%
  mutate(
    Accidents_Change = (Accidents_2022 - Accidents_2021) / Accidents_2021 * 100,
    Fatalities_Change = (Fatalities_2022 - Fatalities_2021) / Fatalities_2021 * 100,
    Injured_Change = (Injured_2022 - Injured_2021) / Injured_2021 * 100
  )
#printing data with changes
print(road_safety_data)

# Visualizing data

# Enhanced Scatter Plot for Accidents
ggplot(road_safety_long, aes(x = Category, y = Accidents, shape = Year, color = Year)) +
  geom_point(size = 4, stroke = 1.5) +  # Increase size and stroke for better visibility
  geom_text(aes(label = Accidents), vjust = -1, size = 4) +  # Adjust label size and position
  scale_shape_manual(values = c(14, 19)) +  # Different shapes for years
  labs(title = "Accidents by Category (2021 vs 2022)", 
       y = "Number of Accidents", 
       x = "Category", 
       color = "Year", 
       shape = "Year") +
  theme_minimal(base_size = 15) +  # Larger base font size
  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Angle x-axis labels for clarity
        panel.grid.major = element_line(color = "lightgrey"),  # Add grid lines
        panel.grid.minor = element_blank())  # Minor grid lines off

#  Scatter Plot for Fatalities
ggplot(road_safety_long, aes(x = Category, y = Fatalities, shape = Year, color = Year)) +
  geom_point(size = 4, stroke = 1.5) +  # Increase size and stroke for better visibility
  geom_text(aes(label = Fatalities), vjust = -1, size = 4) +  # Adjust label size and position
  scale_shape_manual(values = c(9, 5)) +  # Different shapes for years
  labs(title = "Fatalities by Category (2021 vs 2022)", 
       y = "Number of Fatalities", 
       x = "Category", 
       color = "Year", 
       shape = "Year") +
  theme_minimal(base_size = 15) +  # Larger base font size
  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Angle x-axis labels for clarity
        panel.grid.major = element_line(color = "lightgrey"),  # Add grid lines
        panel.grid.minor = element_blank())  # Minor grid lines off

#Persons killed and injured due to non-use of safety devices (helmets and seat belts)during 2022
# Load necessary library
library(dplyr)

# Create the data frame
safety_data <- data.frame(
  Category = c("Drivers", "Passenger", "Total"),
  Killed_Helmet = c(35692, 14337, 50029),
  Injured_Helmet = c(63584, 38307, 101891),
  Killed_Seat_Belt = c(8384, 8331, 16715),
  Injured_Seat_Belt = c(17216, 25087, 42303)
)

# Display the data frame
print(safety_data)

# Calculate percentage shares
safety_data <- safety_data %>%
  mutate(
    Killed_Helmet_Percent = Killed_Helmet / sum(Killed_Helmet) * 100,
    Injured_Helmet_Percent = Injured_Helmet / sum(Injured_Helmet) * 100,
    Killed_Seat_Belt_Percent = Killed_Seat_Belt / sum(Killed_Seat_Belt) * 100,
    Injured_Seat_Belt_Percent = Injured_Seat_Belt / sum(Injured_Seat_Belt) * 100
  )

# print updated dataframe
print(safety_data)

# vizualization of data

# Load necessary library
library(ggplot2)

# Data for fatalities
fatality_data <- data.frame(
  Category = c("Driver - Helmet", "Passenger - Helmet", "Driver - Seat Belt", "Passenger - Seat Belt"),
  Killed = c(35692, 14337, 8384, 8331))

# Data for injuries
injury_data <- data.frame(
  Category = c("Driver - Helmet", "Passenger - Helmet", "Driver - Seat Belt", "Passenger - Seat Belt"),
  Injured = c(63584, 38307, 17216, 25087))

# Function to create pie charts
create_pie_chart <- function(data, title) {
  # Calculate percentages
  data$fraction <- data[[2]] / sum(data[[2]])
  
  # Create the pie chart
  ggplot(data, aes(x = "", y = fraction, fill = Category)) +
    geom_bar(stat = "identity", width = 1, color = "black") +
    coord_polar(theta = "y") +
    theme_void() +
    scale_fill_manual(values = c("#FF9999", "#66B3FF", "#99FF99", "#FFCC99")) +
    labs(title = title) +
    theme(plot.title = element_text(hjust = 0.5)) +
    geom_label(aes(label = paste0(round(fraction * 100), "%")), 
               position = position_stack(vjust = 0.5), color = "marron") +
    theme(legend.position = "bottom")
}

# Plot for fatalities
create_pie_chart(fatality_data, "Fatalities by Category")

create_pie_chart(injury_data, "Injuries by Category")
# Plot for injuries

# Indicators of accidents and accident related deaths over the years normalized by the population and number of vehicles (1970 â€“ 2022)

# Load necessary libraries
library(ggplot2)
library(dplyr)

# Create a data frame with the given data
data <- data.frame(
  Years = c(1970, 1980, 1990, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022),
  Population = c(539000, 673000, 835000, 904000, 924359, 941579, 959792, 978081, 996130, 1014825, 1028610, 1045547, 1062388, 1079117, 1095722, 1112186, 1128521, 1144734, 1160813, 1176742, 1210193, 1208116, 1223581, 1238887, 1254019, 1268961, 1283601, 1298043, 1312241, 1326155, 1363006, 1375586),
  Road_Accident_Risk = c(21.2, 22.8, 33.8, 36, 38.1, 39.4, 38.9, 39.4, 38.8, 38.6, 39.4, 39, 38.3, 39.8, 40.1, 41.4, 42.5, 42.3, 41.9, 42.5, 41.1, 40.6, 39.8, 39.5, 40.3, 38.2, 36.6, 36.2, 34.8, 28.1, 30.3, 33.5),
  Vehicle_Density = c(1, 3, 10, 10, 10, 11, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 26, 28, 30, 33, 35, 35, 38, 41, 43, 44, 47, NA, NA, NA)
)

# Remove rows with NA values in 'Vehicle_Density' to avoid issues in the regression
data <- na.omit(data)

# Perform linear regression: predicting Road Accident Risk based on Population and Vehicle Density
model <- lm(Road_Accident_Risk ~ Population + Vehicle_Density, data = data)
summary(model) # Display model summary

# Create a new data frame for future years to make predictions
future_data <- data.frame(
  Years = c(2021,2022,2023, 2024, 2025,),  # Add future years for predictions
  Population = c(1390000, 1400000, 1410000, 1420000, 1430000),  # Estimated population values
  Vehicle_Density = c(48, 50, 52, 54, 56)  # Estimated vehicle density values
)

# Use the model to predict Road Accident Risk for future years
future_data$Predicted_Risk <- predict(model, newdata = future_data)

# Print the predicted values
print(future_data)

# Plot the historical and predicted values
ggplot() +
  # Historical data points
  geom_point(data = data, aes(x = Years, y = Road_Accident_Risk), color = "blue", size = 3, alpha = 0.7) +
  # Best fit line for historical data
  geom_line(data = data, aes(x = Years, y = predict(model, newdata = data)), color = "red", size = 1) +
  # Predicted points for future data
  geom_point(data = future_data, aes(x = Years, y = Predicted_Risk), color = "green", size = 3, shape = 17) +
  # Line connecting predicted points
  geom_line(data = future_data, aes(x = Years, y = Predicted_Risk), color = "green", linetype = "dashed") +
  labs(title = "Road Accident Risk Prediction",
       x = "Year", y = "Road Accident Risk") +
  theme_minimal()

## SHEET 16 RURAL AND URBAN ACCIDENTS.
# Load necessary libraries
library(readxl)

# Load the data
file_path <- "sheet 16.xlsx"  # Update with your file path
data <- read_excel(file_path, sheet = "Sheet1", col_names = FALSE)

# Rename columns for easier handling
colnames(data) <- c("Year", "Urban_Accidents", "Urban_Killed", "Urban_Injured",
                    "Rural_Accidents", "Rural_Killed", "Rural_Injured",
                    "All_India_Accidents", "All_India_Killed", "All_India_Injured")

# Convert Urban_Accidents and Rural_Accidents to numeric
data_counts$Urban_Accidents <- as.numeric(data_counts$Urban_Accidents)
data_counts$Rural_Accidents <- as.numeric(data_counts$Rural_Accidents)

# Remove rows with NA in Urban_Accidents or Rural_Accidents
data_counts <- data_counts[!is.na(data_counts$Urban_Accidents) & !is.na(data_counts$Rural_Accidents), ]

# Fit the regression model
model <- lm(Rural_Accidents ~ Urban_Accidents, data = data_counts)
summary(model)

# Extract model parameters for annotation
intercept <- round(coef(model)[1], 2)
slope <- round(coef(model)[2], 2)
r_squared <- round(summary(model)$r.squared, 2)
equation <- paste0("y = ", slope, "x + ", intercept, "\nRÂ² = ", r_squared)

# Plot with descriptive regression line
library(ggplot2)

ggplot(data_counts, aes(x = Urban_Accidents, y = Rural_Accidents)) +
  geom_point(color = "blue", size = 3) +
  geom_smooth(method = "lm", color = "red", se = TRUE, linetype = "dashed") +
  labs(title = "Regression Analysis: Urban vs. Rural Accidents",
       subtitle = equation,
       x = "Urban Accidents",
       y = "Rural Accidents") +
  annotate("text", x = max(data_counts$Urban_Accidents, na.rm = TRUE) * 0.8, 
           y = max(data_counts$Rural_Accidents, na.rm = TRUE) * 0.9,
           label = equation, color = "darkred", size = 5, hjust = 0) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 14, color = "darkred"))


## SHEET 12 TYPES OF VECHICLES

# Load necessary libraries
library(ggplot2)

# Create a data frame
data <- data.frame(
  Vehicle_Type = c("Pedestrian", "Bicycles", "Two-wheelers", "Auto-Rickshaws", 
                   "Cars, Taxis, Vans & LMVs", "Trucks/Lorries", "Buses", 
                   "Other Non-Motorized Vehicles", "Others"),
  Total_Incidents = c(32825, 4836, 74897, 6596, 21040, 10584, 4004, 2372, 11337)
)
# Create a bar plot (as boxplot is not suitable for aggregated data)
ggplot(data, aes(x = reorder(Vehicle_Type, Total_Incidents), y = Total_Incidents)) +
  geom_bar(stat = "identity", fill = "PINK") +
  coord_flip() +  # Flip coordinates for better readability
  labs(title = "Total Incidents by Vehicle Type",
       x = "Vehicle Type",
       y = "Total Incidents") +
  theme_minimal()



# SHEET 10 WEATHER 


# Install and load the plotrix package
install.packages("plotrix")  # Uncomment if you haven't installed it
library(plotrix)

# Sample data for three pie charts
data1 <- c(299305, 36432, 28934, 3911, 43850)
labels1 <- c("Sunny/Clear", "Rainy", "Foggy & Misty", "Hail/Sleet", "Others")
colors1 <- rainbow(length(data1))

data2 <- c(342515,38329,34262,4083,42122)
labels2 <- c("Sunny/Clear", "Rainy", "Foggy & Misty", "Hail/Sleet", "Others")
colors2 <- rainbow(length(data2))

data3 <- c(14.4,5.2,18.4,4.4,3.9,11.9)
labels3 <- c("Sunny/Clear", "Rainy", "Foggy & Misty", "Hail/Sleet", "Others")
colors3 <- rainbow(length(data3))

# Set up the layout for 1 row and 3 columns
par(mfrow = c(1, 3))  # Adjust the layout as needed (e.g., c(2, 2) for a 2x2 grid)

# Create the first 3D pie chart
pie3D(data1, labels = labels1, explode = 0.1, 
      main = "Weather Incidents 2021", 
      col = colors1, theta = 1, 
      border = "black", radius = 0.6)

# Create the second 3D pie chart
pie3D(data2, labels = labels2, explode = 0.1, 
      main = "Weather Incidents 2022", 
      col = colors2, theta = 1, 
      border = "black", radius = 0.6)

# Create the third 3D pie chart
pie3D(data3, labels = labels3, explode = 0.1, 
      main = "total percentage(%) change", 
      col = colors3, theta = 1, 
      border = "black", radius = 0.6)

# Reset par to default after plotting
par(mfrow = c(1, 3))

## SHEET 13 
# Load necessary libraries
library(ggplot2)
install.packages("reshape2")
library(reshape2)
# Create the data frame with consistent row lengths
data <- data.frame(
  States_UTs = c("Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh",
                 "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jharkhand", 
                 "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", 
                 "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab", 
                 "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", 
                 "Uttarakhand", "Uttar Pradesh", "West Bengal", "A & N Islands", 
                 "Chandigarh", "D & N Haveli", "Daman & Diu", "Delhi", 
                 "J & K", "Ladakh", "Lakshadweep", "Puducherry", "Total"),
  2018 = c(24475, 277, 8248, 9600, 13864, 3709, 18769, 11238, 3110, 5394, 
           41707, 40181, 51397, 35717, 601, 399, 53, 430, 11262, 6428, 
           21743, 180, 67279, 22230, 552, 1468, 42568, 12705, 254, 316, 
           80, 76, 6515, 5978, 0, 3,1597, 470403),
  2019 = c(21992, 237, 8350, 10007, 13899, 3440, 17046, 10944, 2873, 5217, 
           40658, 41111, 50669, 32925, 672, 482, 62, 358, 11064, 6348, 
           23480, 162, 62685, 21570, 655, 1352, 42572, 12658, 230, 305, 
           68, 69, 5610, 5796, 0, 1,1392, 456959),
  2020 = c(19509, 134, 6595, 8639, 11656, 2375, 13398, 9431, 2239, 4405, 
           34178, 27877, 45266, 24971, 432, 214, 53, 500, 9817, 5203, 
           19114, 138, 49844, 19172, 466, 1041, 34243, 10863, 141, 159, 
           100, 0, 4178, 4860, 0, 1,969, 372181),
  2021 = c(21556, 283, 7411, 9553, 12375, 2849, 15186, 9933, 2404, 4728, 
           34647, 33296, 48877, 29477, 366, 245, 69, 746, 10983, 5871, 
           20951, 155, 55682, 21315, 479, 1405, 37729, 11937, 115, 208, 
           140, 4, 4720, 5452, 236, 4,1049, 412432),
  2022 = c(21249, 227, 7023, 10801, 13279, 3011, 15751, 10429, 2597, 5175, 
           39762, 43910, 54432, 33383, 508, 246, 133, 489, 11663, 6138, 
           23614, 211, 64105, 21619, 575, 1674, 41746, 13686, 141, 237, 
           196, 3, 5652, 6092, 374, 3,1181, 461312))
# Remove the "Total" row for the boxplot
data <- data[-which(data$States_UTs == "Total"), ]
# Reshape data to long format for ggplot
data_long <- melt(data, id.vars = "States_UTs")
# Create boxplot
ggplot(data_long, aes(x = variable, y = value, fill = variable)) +
  geom_boxplot() +
  labs(x = "Year", y = "Incidents", title = "Boxplot of Incidents by Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(data_long)

## SHEET 17 COUNTRY WISE DATA ON ACCIDENT

# Prepare data
# Number of persons injured
persons_injured <- c(2282015, 482333, 369476, 348279, 327550, 317545, 
                     306194, 250723, 226266, 183040, 159248, 149817, 
                     120343, 114124, 101572, 94562, 71456, 65846, 
                     56789, 55836)

# Injuries per 100,000 population
injuries_per_100k <- c(688, 2045, 299, 25, 398, 377, 586, 18, 
                       270, 127, 266, 55, 324, 172, 268, 
                       200, 34, 145, 55, 84)

# Set up the plotting area
par(mfrow = c(1, 2), mar = c(4, 4, 2, 2))  # 1 row and 2 columns; adjust margins

# Histogram for Persons Injured
hist(persons_injured, 
     main = "Distribution of Persons Injured Worldwide", 
     xlab = "Number of Persons Injured", 
     ylab = "Frequency", 
     col = "lightblue", 
     border = "black",
     breaks = 10, 
     xlim = c(0, 2500000),  # Set x-axis limits for better clarity
     ylim = c(0, 10),       # Set y-axis limits based on frequency
     las = 1)               # Horizontal axis labels

# Adding a grid for better readability
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")

# Adding text annotations
text(2000000, 8, labels = "Highest Injury Count", col = "red", cex = 0.8)

# Histogram for Injuries per 100,000 Population
hist(injuries_per_100k, 
     main = "Injuries per 100,000 Population", 
     xlab = "Injuries per 100,000", 
     ylab = "Frequency", 
     col = "salmon", 
     border = "black",
     breaks = 10, 
     xlim = c(0, 2100),  # Set x-axis limits for better clarity
     ylim = c(0, 5),     # Set y-axis limits based on frequency
     las = 1)             # Horizontal axis labels

# Adding a grid for better readability
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")

# Adding text annotations
text(1500, 4, labels = "Highest Rate of Injuries", col = "red", cex = 0.8)



## SHEET 18 AGE- GROUP
install.packages("plotrix")
library(plotrix)
# Data for the first pie chart
counts1 <- c(6137, 28088, 34927, 28568, 22171, 9435)
labels1 <- c("Less than 18", "18-25", "25-35", "35-45", "45-60", "60 and Above")

# Data for the second pie chart
counts2 <- c(1627,3662,4719,4173,3914,2304)
labels2 <- c("Less than 18", "18-25", "25-35", "35-45", "45-60", "60 and Above")
# Set up a 1x2 layout for two pie charts
par(mfrow = c(1, 2))  # 1 row and 2 columns
# Create the first 3D pie chart
pie3D(counts1, labels = labels1, explode = 0.1, main = "MALE", 
      col = rainbow(length(counts1)), 
      theta = 1)

# Create the second 3D pie chart
pie3D(counts2, labels = labels2, explode = 0.1, main = "FEMALE", 
      col = rainbow(length(counts2)), 
      theta = 1)

## SHEET 15 TIME INTERVAL

# Data for the year 2022
time_intervals <- c("9:00 - 12:00", "12:00 - 15:00", "15:00 - 18:00",
                    "18:00 - 21:00", "21:00 - 24:00", "24:00 - 3:00",
                    "3:00 - 6:00", "6:00 - 9:00", "Unknown Time")
accidents_2022 <- c(48304, 65664, 67979, 79637, 94009, 
                    52915, 23471, 24152, 5181)


# Add grid lines
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")

# Add annotations for maximum accident counts
max_accidents <- max(accidents_2022)
text(max_accidents - 1000, 2, labels = paste("Max Accidents:", max_accidents), col = "red", cex = 0.8)

# Add custom x-ticks for time intervals
time_labels <- c("9:00 - 12:00", "12:00 - 15:00", "15:00 - 18:00", 
                 "18:00 - 21:00", "21:00 - 24:00", "24:00 - 3:00",
                 "3:00 - 6:00", "6:00 - 9:00", "Unknown Time")
axis(1, at = seq(0, max(accidents_2022), length.out = length(time_intervals)), labels = time_labels, las = 2)


# Create the histogram
hist(accidents_2022,
     main = "Number of Accidents by Time Interval (2022)",
     xlab = "Number of Accidents",
     ylab = "Frequency",
     col = "lightblue",
     border = "black",
     breaks = seq(0, max(accidents_2022) + 10000, by = 10000),
     xaxt = "n")

# Add custom x-ticks for time intervals with vertical labels
axis(1, at = seq(0, max(accidents_2022), length.out = length(time_intervals)), 
     labels = time_labels, las = 2)  # 'las = 2' makes labels vertical